import heapq


goal_state = [[1,2,3],[4,5,6],[7,8,0]]


def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                goal_x, goal_y = (val - 1) // 3, (val - 1) % 3
                distance += abs(goal_x - i) + abs(goal_y - j)
    return distance


def is_goal(state):
    return state == goal_state


def get_neighbors(state):
    neighbors = []
    x, y = [(ix, iy) for ix, row in enumerate(state) for iy, i in enumerate(row) if i == 0][0]
    directions = [(-1,0), (1,0), (0,-1), (0,1)]

    for dx, dy in directions:
        nx, ny = x+dx, y+dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors


def serialize(state):
    return tuple(tuple(row) for row in state)


def solve_puzzle(start_state):
    heap = []
    visited = set()
    heapq.heappush(heap, (manhattan_distance(start_state), 0, start_state, []))

    while heap:
        f, g, state, path = heapq.heappop(heap)

        if is_goal(state):
            return path + [state]

        if serialize(state) in visited:
            continue

        visited.add(serialize(state))

        for neighbor in get_neighbors(state):
            if serialize(neighbor) not in visited:
                heapq.heappush(heap, (
                    g + 1 + manhattan_distance(neighbor), 
                    g + 1,
                    neighbor,
                    path + [state]
                ))
    return None


start = [[1, 2, 3], [4, 0, 6], [7, 5, 8]]

solution = solve_puzzle(start)

if solution:
    print("Steps to solve the puzzle:")
    for step in solution:
        for row in step:
            print(row)
        print("------")
else:
    print("No solution found.")


OUTPUT:
Steps to solve the puzzle:
[1, 2, 3]
[4, 0, 6]
[7, 5, 8]
------
[1, 2, 3]
[4, 5, 6]
[7, 0, 8]
------
[1, 2, 3]
[4, 5, 6]
[7, 8, 0]